import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Load data
data = pd.read_csv('data.csv')

# Extract features and target
X = data.iloc[:, :-1].values  # Features (69 variables)
y = data.iloc[:, -1].values   # CPI index

# Normalize the features
scaler = MinMaxScaler(feature_range=(0, 1))
X_scaled = scaler.fit_transform(X)

# Function to create sequences
def create_sequences(X, y, time_steps=1):
    Xs, ys = [], []
    for i in range(len(X) - time_steps):
        Xs.append(X[i:(i + time_steps)])
        ys.append(y[i + time_steps])
    return np.array(Xs), np.array(ys)

# Create sequences with time steps = 12 (for 12 months)
time_steps = 12
X_seq, y_seq = create_sequences(X_scaled, y, time_steps)

# Split the data into training and testing sets
split = int(len(X_seq) * 0.8)
X_train, X_test = X_seq[:split], X_seq[split:]
y_train, y_test = y_seq[:split], y_seq[split:]

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=False, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test), verbose=2, shuffle=False)

# Plot training & validation loss values
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

# Make predictions on test data
y_pred = model.predict(X_test)

# Prepare data for plotting original and predicted values
plt.figure(figsize=(14, 7))
plt.plot(range(len(y)), y, color='blue', label='Original CPI')
plt.plot(range(len(y) - len(y_test), len(y)), y_pred, color='red', label='Predicted CPI')
plt.title('Original and Predicted CPI')
plt.xlabel('Months')
plt.ylabel('CPI Index')
plt.legend()
plt.show()

# Forecast future values
def forecast(model, X_input, n_future=24):
    predictions = []
    current_input = X_input
    for _ in range(n_future):
        pred = model.predict(current_input)
        predictions.append(pred[0])
        current_input = np.append(current_input[:, 1:, :], [[pred]], axis=1)
    return np.array(predictions)

# Use the last available data to forecast
X_last_seq = X_scaled[-time_steps:].reshape(1, time_steps, X.shape[1])
y_forecast = forecast(model, X_last_seq, n_future=24)

# Prepare dates for plotting forecast
last_date = datetime.strptime('01/04/2024', '%d/%m/%Y')
forecast_dates = [last_date + timedelta(days=30*i) for i in range(len(y_forecast))]

# Print forecasted values
forecast_df = pd.DataFrame({'Date': forecast_dates, 'Forecasted CPI': y_forecast.flatten()})
print(forecast_df)

# Plot the forecast
plt.figure(figsize=(14, 7))
plt.plot(range(len(y)), y, color='blue', label='Original CPI')
plt.plot(range(len(y) - len(y_test), len(y)), y_pred, color='red', label='Predicted CPI')
plt.plot(range(len(y), len(y) + len(y_forecast)), y_forecast, color='green', label='Forecasted CPI')
plt.title('CPI Index Forecast')
plt.xlabel('Months')
plt.ylabel('CPI Index')
plt.legend()
plt.show()

# Optionally, save the results to a CSV file
forecast_df.to_csv('cpi_forecast.csv', index=False)

# Evaluate the model on test data
mse = model.evaluate(X_test, y_test)
print('Mean Squared Error:', mse)
